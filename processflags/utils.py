import doctest
import sys
import os
sys.path.insert(0, 'drawflags/')
from embedding_icons import *
from IPython.display import Image

def get_info_for_line(line_info, headers, keyword):
    """
    Return the value associatied with a given column when parsing a row of the csv input.
    :param headers: dictionary of csv headers
    :param line_info: partially parsed line of csv
    :param keyword: name of the column
    :return: the value within row specified by line_info that is at column of keyword
    >>> h =  {'hex': 0, 'association': 1, 'aka': 2, 'Hue-init': 3, 'Subhue-init': 4, 'Light-init': 5, 'sat': 6, 'Note': 7, 'meaning1': 8, 'meaning2': 9, 'block': 10, 'categ': 11, 'intersex?': 12, 'order': 13, 'place': 14, 'orient': 15, 'relsize': 16, 'satnote': 17, 'R': 18, 'G': 19, 'B': 20, 'okL': 21, 'okC': 22, 'okH': 23, 'hasmean?': 24, 'gender': 25, 'expression': 26, 'sex': 27, 'abstract': 28, 'attraction': 29, 'colour?': 30, '': 31, 'lchL': 32, 'lchC': 33, 'lchH': 34, 'hsvH': 35, 'hsvS': 36, 'hsvV': 37, 'labL': 38, 'labA': 39, 'labB': 40, 'oklabL': 41, 'oklabA': 42, 'oklabB': 43}
    >>> ln = ['#fef4f5', 'indigiqueer', '', 'white', '', '', '', '', '', '', '', 'gender', 'False', '6', 'icon', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    >>> get_info_for_line(ln, h, 'hex')
    '#fef4f5'
    >>> get_info_for_line(ln, h, 'association')
    'indigiqueer'
    """
    assert keyword in headers, keyword + str(line_info) + str(headers)
    index = headers[keyword]
    assert len(line_info) > index , str(index) + str(line_info) + str(len(line_info))
    info = line_info[index]
    return info

def get_info_for_columns(line_info, headers, keywords):
    """
    Return the values associatied with given columns when parsing a row of the csv input.
    :param headers: dictionary of csv headers
    :param line_info: partially parsed line of csv
    :param keyword: name of the columns in question
    :return: the value within row specified by line_info that is at column of keyword
    >>> h =  {'hex': 0, 'association': 1, 'aka': 2, 'Hue-init': 3, 'Subhue-init': 4, 'Light-init': 5, 'sat': 6, 'Note': 7, 'meaning1': 8, 'meaning2': 9, 'block': 10, 'categ': 11, 'intersex?': 12, 'order': 13, 'place': 14, 'orient': 15, 'relsize': 16, 'satnote': 17, 'R': 18, 'G': 19, 'B': 20, 'okL': 21, 'okC': 22, 'okH': 23, 'hasmean?': 24, 'gender': 25, 'expression': 26, 'sex': 27, 'abstract': 28, 'attraction': 29, 'colour?': 30, '': 31, 'lchL': 32, 'lchC': 33, 'lchH': 34, 'hsvH': 35, 'hsvS': 36, 'hsvV': 37, 'labL': 38, 'labA': 39, 'labB': 40, 'oklabL': 41, 'oklabA': 42, 'oklabB': 43}
    >>> ln = ['#fef4f5', 'indigiqueer', '', 'white', '', '', '', '', '', '', '', 'gender', 'False', '6', 'icon', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    >>> get_info_for_columns(ln, h, ['hex', 'association', 'aka'])
    {'hex': '#fef4f5', 'association': 'indigiqueer', 'aka': ''}
    >>> get_info_for_columns(ln, h, LOCATORS)
    {'order': '6', 'place': 'icon', 'relsize': '', 'orient': ''}
    """
    results = {}
    for keyword in keywords:
        results[keyword] = get_info_for_line(line_info, headers, keyword)
    return results


def get_info_by_column(line_info, headers, keywords):
    """
    Wrapper for get_info_for_columns and get_info_for_column
    :param line_info:
    :param headers:
    :param keywords:
    :return:
    """
    if type(keywords) == str:
        return get_info_for_line(line_info, headers, keywords)
    return get_info_for_columns(line_info, headers, keywords)


def get_headers(f, DELIM='\t'):
    """
    Read the first (next/current) line of f into a dictionary of headers
    :param f: file object (already opened)
    :param line:
    :param DELIM:
    :return:
    """
    csv_headers = {}
    raw_headers = f.readline().strip().split(DELIM)
    for i, h in enumerate(raw_headers):
        csv_headers[h] = i
    return csv_headers


def separate_svg_path(s):
    """
    Take a string representing an SVG path and turn it into a new string that
    represents the path in drawsvg.
    :param s: a path string. Must be all absolute.
    :return:
    >>> s = 'M233.14606,2008.031C659.81265,2747.0389999999998,1783.8721,2105.1105,1357.2055,1366.1024C1781.7582,619.3380099999999,2919.4029,1263.3265999999999,2484.9812,2004.3931M1366.1206,76.818124C507.12735,71.109224,498.21223,1371.7897,1357.2055,1366.1024M2637.1773000000003,1366.1184C2648.5952,-351.86798,65.859465,-351.90088,77.233765,1366.0864C88.458065,3061.4318,2625.91,3061.4641,2637.1773,1366.1184Z'
    >>> separate_svg_path(s)
    ['M233.14606,2008.031', 'C659.81265,2747.0389999999998,1783.8721,2105.1105,1357.2055,1366.1024', 'C1781.7582,619.3380099999999,2919.4029,1263.3265999999999,2484.9812,2004.3931', 'M1366.1206,76.818124', 'C507.12735,71.109224,498.21223,1371.7897,1357.2055,1366.1024', 'M2637.1773000000003,1366.1184', 'C2648.5952,-351.86798,65.859465,-351.90088,77.233765,1366.0864', 'C88.458065,3061.4318,2625.91,3061.4641,2637.1773,1366.1184', 'Z']
    >>> s = 'M 1366.1206,76.818124 C 507.12735,71.109224 498.21223,1371.7897 1357.2055,1366.1024'
    >>> separate_svg_path(s)
    ['M1366.1206,76.818124', 'C507.12735,71.109224498.21223,1371.78971357.2055,1366.1024']
    """
    s = s.replace(' ','')
    sections = []
    curr_section = ''
    for char in s:
        if char in ['M', 'S', 'L', 'Z', 'C', 'Q', 'A', 'H']: # any others?
            sections.append(curr_section)
            curr_section = ''
        curr_section += char
    sections.append(curr_section)
    return sections[1:]

def parse_svg_path(s, rounding_precision=3, firstx=0, firsty=0, rounding_func=round, translate_x=0, translate_y=0):
    """
    Take a string representing an SVG path and turn it into a new string that
    represents the path in drawsvg.
    :param s: a path string. Must be all absolute.
    :return:
    >>> s = 'M233.14606,2008.031C659.81265,2747.0389999999998,1783.8721,2105.1105,1357.2055,1366.1024C1781.7582,619.3380099999999,2919.4029,1263.3265999999999,2484.9812,2004.3931M1366.1206,76.818124C507.12735,71.109224,498.21223,1371.7897,1357.2055,1366.1024M2637.1773000000003,1366.1184C2648.5952,-351.86798,65.859465,-351.90088,77.233765,1366.0864C88.458065,3061.4318,2625.91,3061.4641,2637.1773,1366.1184Z'
    >>> parse_svg_path(s, rounding_precision=-2)
    #x coordinates
    x1 = x_start + 200.0*w
    x2 = x_start + 700.0*w
    x3 = x_start + 1800.0*w
    x4 = x_start + 1400.0*w
    x6 = x_start + 2900.0*w
    x7 = x_start + 2500.0*w
    x9 = x_start + 500.0*w
    x12 = x_start + 2600.0*w
    x14 = x_start + 100.0*w
    #y coordinates
    y1 = y_start + 2000.0*h
    y2 = y_start + 2700.0*h
    y3 = y_start + 2100.0*h
    y4 = y_start + 1400.0*h
    y5 = y_start + 600.0*h
    y6 = y_start + 1300.0*h
    y8 = y_start + 100.0*h
    y13 = y_start + -400.0*h
    y16 = y_start + 3100.0*h
    <BLANKLINE>
    p.M(x1, y1)
    p.C(x2, y2, x3, y3, x4, y4)
    p.C(x3, y5, x6, y6, x7, y1)
    p.M(x4, y8)
    p.C(x9, y8, x9, y4, x4, y4)
    p.M(x12, y4)
    p.C(x12, y13, x14, y13, x14, y4)
    p.C(x14, y16, x12, y16, x12, y4)
    p.Z()
    d.append(p)
    >>> parse_svg_path(s, rounding_precision=-2, translate_x=10, translate_y=50)
    #x coordinates
    x1 = x_start + 210.0*w
    x2 = x_start + 710.0*w
    x3 = x_start + 1810.0*w
    x4 = x_start + 1410.0*w
    x6 = x_start + 2910.0*w
    x7 = x_start + 2510.0*w
    x9 = x_start + 510.0*w
    x12 = x_start + 2610.0*w
    x14 = x_start + 110.0*w
    #y coordinates
    y1 = y_start + 2050.0*h
    y2 = y_start + 2750.0*h
    y3 = y_start + 2150.0*h
    y4 = y_start + 1450.0*h
    y5 = y_start + 650.0*h
    y6 = y_start + 1350.0*h
    y8 = y_start + 150.0*h
    y13 = y_start + -350.0*h
    y16 = y_start + 3150.0*h
    <BLANKLINE>
    p.M(x1, y1)
    p.C(x2, y2, x3, y3, x4, y4)
    p.C(x3, y5, x6, y6, x7, y1)
    p.M(x4, y8)
    p.C(x9, y8, x9, y4, x4, y4)
    p.M(x12, y4)
    p.C(x12, y13, x14, y13, x14, y4)
    p.C(x14, y16, x12, y16, x12, y4)
    p.Z()
    d.append(p)
    """
    s = s.replace(' ','')
    sections = separate_svg_path(s)
    varstart = {0:'x', 1:'y'}
    vars_seen = {'x':firstx, 'y':firsty}
    varnames = {'x':{}, 'y':{}}
    offsets = {'x':translate_x, 'y':translate_y}

    commands = []
    for cm in sections:
        cmd = cm[0]
        nums = cm[1:].split(',')
        vars = []
        if cmd not in ['Z']:
            for i, num in enumerate(nums):
                axis = varstart[i%2]
                vars_seen[axis] += 1

                numval = rounding_func(float(num), rounding_precision)+ offsets[axis]
                if numval not in varnames[axis]:
                    varnames[axis][numval] = axis + str(vars_seen[axis])
                varname = varnames[axis][numval]
                vars.append(varname)


                #print(i, num, axis, varname)
        varlist = ', '.join(vars)
        commands.append(f'p.{cmd}({varlist})')


    #assert vars_seen['x'] == vars_seen['y']

    axisalters = {'x':'w', 'y':'h'}
    for axis in varnames: # print variable assignments
        print(f'#{axis} coordinates')
        for num in varnames[axis]:
            print(f'{varnames[axis][num]} = {axis}_start + {num}*{axisalters[axis]}')
    print()
    for cmd in commands:
        print(cmd)
    print('d.append(p)')

def save_flag(d, name, directory='output/', save_png=True, save_svg=True, show_image=False, suffix='', prefix='', same_folder=False):
    # keep same_folder False as the Notebooks are set up that way
    assert directory.endswith('/')
    whether_save = {'png':save_png, 'svg':save_svg}
    saved_to = []
    for filetype in whether_save:
        if whether_save[filetype]:
            if same_folder:
                png_loc = directory
            else:
                png_loc = directory + filetype + '/'
            png_name = png_loc + prefix + name + suffix + '.' + filetype
            if not os.path.exists(png_loc):
                os.makedirs(png_loc)
            if filetype == 'png':
                d.save_png(png_name)
                saved_to.append(png_name)
            else:
                d.save_svg(png_name)
                saved_to.append(png_name)

    if show_image:
        display(Image(filename=saved_to[0]))
    return saved_to


def round_percent_to_nearest_five_unless_90s(n):
    """
    Round n to the nearest 5, unless n is above 90.
    Then round to the nearest even number.
    Never round to 100 unless n is already 100.
    :param n: number
    :return: rounded integer
    >>> round_percent_to_nearest_five_unless_90s(32)
    30
    >>> round_percent_to_nearest_five_unless_90s(90.5)
    90
    >>> round_percent_to_nearest_five_unless_90s(91.5)
    92
    >>> round_percent_to_nearest_five_unless_90s(99.9)
    98
    >>> round_percent_to_nearest_five_unless_90s(97.6)
    98
    >>> round_percent_to_nearest_five_unless_90s(100)
    100
    >>> round_percent_to_nearest_five_unless_90s(105)
    100
    """
    if n < 90:
        return round_to_nearest_five(n)
    if n >= 100:
        return 100
    r = round_to_nearest_even_number(n)
    if r == 100:
        return 98
    return r

def round_to_nearest_five(n, m=0):
    """
    Round n to the nearest 5
    :param n: number
    :return: rounded integer to nearest 5
    >>> round_to_nearest_five(323)
    325
    >>> round_to_nearest_five(46.2)
    45
    >>> round_to_nearest_five(-10.5983)
    -10
    >>> round_to_nearest_five(0)
    0
    """
    return round(n/5)*5


def round_to_nearest_even_number(n, m=0):
    """
    Round n to the nearest even integer
    :param n: number to round
    :return: integer rounded to nearest even
    >>> round_to_nearest_even_number(23.1)
    24
    >>> round_to_nearest_even_number(24)
    24
    >>> round_to_nearest_even_number(24.9)
    24
    >>> round_to_nearest_even_number(-0.34)
    0
    >>> round_to_nearest_even_number(-3.6)
    -4
    >>> round_to_nearest_even_number(333)
    332
    """
    return round(n/2)*2




if __name__ == '__main__':
    doctest.testmod()
    #s = 'M233.14606,2008.031C659.81265,2747.0389999999998,1783.8721,2105.1105,1357.2055,1366.1024C1781.7582,619.3380099999999,2919.4029,1263.3265999999999,2484.9812,2004.3931M1366.1206,76.818124C507.12735,71.109224,498.21223,1371.7897,1357.2055,1366.1024M2637.1773000000003,1366.1184C2648.5952,-351.86798,65.859465,-351.90088,77.233765,1366.0864C88.458065,3061.4318,2625.91,3061.4641,2637.1773,1366.1184Z'
    #s = 'M233.14606,2008.031C659.81265,2747.0389999999998,1783.8721,2105.1105,1357.2055,1366.1024C1781.7582,619.3380099999999,2919.4029,1263.3265999999999,2484.9812,2004.3931'
    s = 'M 1366.1206,76.818124 C 507.12735,71.109224, 498.21223,1371.7897, 1357.2055,1366.1024'
    s2 = 'M233.14606,2008.031C659.81265,2747.0389999999998,1783.8721,2105.1105,1357.2055,1366.1024C1781.7582,619.3380099999999,2919.4029,1263.3265999999999,2484.9812,2004.3931'
    #
    s = 'M379.15048,326.71772C393.68423,333.48517,407.22473,335.5506,419.25373,335.5506C472.25023,335.5506,507.58173,294.00546999999995,507.58173,266.30796999999995C507.58173,244.48746999999995,490.52973,223.03871999999996,464.42798,223.03871999999996C449.82547999999997,223.03871999999996,437.16573,229.93696999999995,429.24248,240.83646999999996C433.04748,249.01546999999997,434.87148,257.68771999999996,434.87148,266.26546999999994C434.87148,295.65646999999996,412.54698,324.05521999999996,379.15048,326.71771999999993Z'
    #parse_svg_path(s2, 0, firstx=5, firsty=5)
    #parse_svg_path(s, 0)
    s2 = 'M375.98823,188.43522C375.98823,210.80997,392.97123,229.21796999999998,414.75122999999996,231.47271999999998C426.29322999999994,214.90221999999997,445.04272999999995,205.73096999999999,464.27747999999997,205.73096999999999C484.19647999999995,205.73096999999999,502.76147999999995,215.48696999999999,514.07948,231.88521999999998C509.78623,183.27846999999997,468.97273,145.16571999999996,419.25723,145.16571999999996C395.91398,145.16571999999996,375.98823,163.52821999999998,375.98823,188.43521999999996Z'
    #parse_svg_path(s2, 0, 18, 18)
    s = 'M196.46,232.73L128.18,191.22L60.07300000000001,233.01L78.45400000000001,155.24L17.66100000000001,103.38000000000001L97.30000000000001,96.83500000000001L127.84,22.991000000000014L158.678,96.70800000000001L238.34300000000002,102.93030000000002L177.76300000000003,155.03930000000003Z'
    s = 'M163.20014,98.298651L162.06588,99.373124L162.34792,100.91458L160.975,100.16554000000001L159.60208,100.91458L159.88412,99.373124L158.74985,98.298651L160.30216000000001,98.09227600000001L160.97500000000002,96.68125300000001L161.64783000000003,98.09227600000001Z'
    #parse_svg_path(s)
    s = 'M142.74646,113.87472C142.67576000000003,113.69057,142.61798000000002,112.94954,142.61798000000002,112.22798C142.61798000000002,100.0677,136.35897000000003,83.716184,117.64081000000002,46.975684C114.96350000000001,41.720604,112.77299000000002,37.362914,112.77299000000002,37.291934C112.77299000000002,37.220934,120.73131000000002,37.162864,130.45815000000002,37.162864H148.14333000000002L155.30282000000003,51.609114C172.96919000000003,87.25591399999999,177.75215000000003,100.28757999999999,177.75440000000003,112.78078L177.75465000000003,114.20952999999999H160.3148C144.60719,114.20952999999999,142.86218,114.17622999999999,142.74645999999998,113.87471999999998Z'
    #parse_svg_path(s, 0)

    inf = 'M58.871,54.27C62.9804,58.52,69.187,64.0317,75.344,64.0317C87.809,64.0317,94.078,48.8947,85.26589999999999,40.0827C82.72679999999998,37.543600000000005,79.219,35.9733,75.344,35.9733C65.6292,35.9733,55.27799999999999,49.7663,48.79299999999999,57.0163C43.08989999999999,63.321,34.51599999999999,71.5323,24.65599999999999,71.5323C5.538999999999991,71.5323,-4.09800000000001,48.30930000000001,9.432999999999991,34.77830000000001C13.32749999999999,30.883800000000008,18.71029999999999,28.47360000000001,24.65599999999999,28.47360000000001C33.038799999999995,28.47360000000001,40.54699999999999,34.45410000000001,46.108999999999995,40.12960000000001L41.14019999999999,45.75070000000001C37.02689999999999,41.49680000000001,30.816199999999995,35.97730000000001,24.652199999999993,35.97730000000001C12.187199999999994,35.97730000000001,5.918199999999992,51.11430000000001,14.730299999999993,59.92630000000001C17.269399999999994,62.46540000000001,20.777199999999993,64.0357,24.652199999999993,64.0357C34.57019999999999,64.0357,45.2692,49.566700000000004,52.0072,42.105700000000006C57.6986,35.94160000000001,65.9332,28.472700000000007,75.3392,28.472700000000007C94.45620000000001,28.472700000000007,104.09320000000001,51.6957,90.5622,65.22670000000001C86.66770000000001,69.1212,81.28490000000001,71.5314,75.3392,71.5314C66.9642,71.5314,59.46020000000001,65.5587,53.8982,59.89040000000001Z'
    parse_svg_path(inf, 0, translate_x=5, translate_y=5)

    tapered_inf = 'M85.698427,153.45576C78.347849,153.20839,71.038896,157.64251,68.26987199999999,164.52307C64.870573,171.87831,68.83465199999999,181.05937999999998,75.8624,184.62874C81.900013,187.88063,89.997059,186.45220999999998,94.626013,181.40648C97.20474,178.83667,99.41782,175.93555999999998,101.76371,173.15923999999998C107.33003000000001,178.08007999999998,112.9234,183.5837,120.1735,185.87509999999997C128.37325,188.14164999999997,137.90565,183.93830999999997,141.416,176.10449999999997C145.58326,168.06544999999997,140.88852,157.31613,132.51187,154.29283999999998C126.82896999999998,152.36265999999998,120.10417999999999,153.78118999999998,115.65463999999999,157.80835C112.81407999999999,160.28701999999998,110.44624999999999,163.24052,108.02095999999999,166.1109C102.50617999999999,161.22117999999998,96.81026099999998,155.82526,89.486572,153.90524C88.24665399999999,153.61105999999998,86.973159,153.45489,85.698427,153.45576ZM125.74258,159.09732C131.35924,159.02142,138.03631000000001,161.57237,139.76762,167.42302999999998C141.14915,171.85752,138.54781,176.94903,134.11038,178.36021C128.83891,180.48874,123.10198999999999,178.35820999999999,118.67593,175.30876C114.75698,172.69913,111.28066999999999,169.48525,108.01189,166.11204C112.2233,161.24596,118.73029,158.84866,125.08913999999999,159.10094ZM80.636616,160.70865C87.667896,160.82257,93.531655,165.45136,98.518786,169.94099C99.89999800000001,171.45623,103.20217000000001,173.15187,100.18870000000001,174.72897C93.817648,180.80168,83.522772,182.92274,75.58143700000001,178.79843C71.177333,176.69017,68.59164200000001,171.21367,70.52768900000001,166.58615C72.07670900000001,162.57127,76.58268900000002,160.704,80.636616,160.70865Z'
    #parse_svg_path(tapered_inf, 0, rounding_func=round_to_nearest_even_number)
    #parse_svg_path(tapered_inf, 0)

    hollow_inf = 'M50.79,40.711C47.461999999999996,38.405,42.825,35.378,38.454,33.150999999999996C33.946,30.853999999999996,29.560000000000002,29.502999999999997,26.494,29.502999999999997C15.067,29.502999999999997,5.789999999999999,38.781,5.789999999999999,50.208C5.789999999999999,61.634,15.066999999999998,70.912,26.494,70.912C29.56,70.912,33.946,69.561,38.454,67.26400000000001C42.825,65.037,47.462,62.01100000000001,50.79,59.70400000000001C54.116,62.010000000000005,58.754,65.037,63.125,67.26400000000001C67.633,69.561,72.019,70.912,75.08500000000001,70.912C86.512,70.912,95.79,61.63400000000001,95.79,50.208000000000006C95.79,38.781000000000006,86.512,29.503000000000007,75.08500000000001,29.503000000000007C72.019,29.503000000000007,67.63300000000001,30.854000000000006,63.12500000000001,33.15100000000001C58.75500000000001,35.37800000000001,54.11800000000001,38.40400000000001,50.790000000000006,40.71100000000001ZM55.28,43.859C58.104,41.978,62.265,39.406,65.47800000000001,37.769000000000005C69.11600000000001,35.916000000000004,72.611,34.687000000000005,75.08500000000001,34.687000000000005C83.65200000000002,34.687000000000005,90.60600000000001,41.641000000000005,90.60600000000001,50.208000000000006C90.60600000000001,58.77400000000001,83.65200000000002,65.72800000000001,75.08500000000001,65.72800000000001C72.611,65.72800000000001,69.11600000000001,64.49900000000001,65.47800000000001,62.64600000000001C60.641000000000005,60.18100000000001,55.46700000000001,56.68100000000001,52.29600000000001,54.43000000000001C52.29600000000001,54.43000000000001,43.50000000000001,48.104000000000006,43.50000000000001,48.104000000000006C43.479000000000006,48.089000000000006,43.458000000000006,48.074000000000005,43.437000000000005,48.06000000000001C40.615,46.15400000000001,37.129000000000005,43.95500000000001,33.81100000000001,42.26400000000001C31.019000000000005,40.84100000000001,28.393000000000008,39.73100000000001,26.494000000000007,39.73100000000001C20.711000000000006,39.73100000000001,16.017000000000007,44.42500000000001,16.017000000000007,50.20800000000001C16.017000000000007,55.99000000000001,20.711000000000006,60.68400000000001,26.494000000000007,60.68400000000001C28.393000000000008,60.68400000000001,31.019000000000005,59.57400000000001,33.81100000000001,58.15100000000001C36.26700000000001,56.90000000000001,39.55700000000001,54.92600000000001,41.85900000000001,53.44300000000001C41.85900000000001,53.44300000000001,46.30000000000001,56.55600000000001,46.30000000000001,56.55600000000001C43.47500000000001,58.43700000000001,39.314000000000014,61.009000000000015,36.10100000000001,62.646000000000015C32.46400000000001,64.49900000000001,28.968000000000014,65.72800000000001,26.494000000000014,65.72800000000001C17.92800000000001,65.72800000000001,10.973000000000013,58.77400000000001,10.973000000000013,50.20800000000001C10.973000000000013,41.64100000000001,17.92800000000001,34.68700000000001,26.494000000000014,34.68700000000001C28.968000000000014,34.68700000000001,32.46400000000001,35.91600000000001,36.10100000000001,37.76900000000001C40.87000000000001,40.19900000000001,45.966000000000015,43.63600000000001,49.14800000000001,45.890000000000015C49.14800000000001,45.890000000000015,58.11800000000001,52.338000000000015,58.11800000000001,52.338000000000015C58.13900000000001,52.353000000000016,58.16000000000001,52.36700000000002,58.18100000000001,52.38200000000001C60.99600000000001,54.28100000000001,64.46500000000002,56.46800000000001,67.76800000000001,58.15100000000001C70.56000000000002,59.57400000000001,73.18600000000002,60.68400000000001,75.08500000000001,60.68400000000001C80.86800000000001,60.68400000000001,85.56200000000001,55.99000000000001,85.56200000000001,50.20800000000001C85.56200000000001,44.42500000000001,80.86800000000001,39.73100000000001,75.08500000000001,39.73100000000001C73.186,39.73100000000001,70.56,40.84100000000001,67.768,42.26400000000001C65.312,43.51500000000001,62.022,45.48900000000001,59.72,46.97200000000001L55.28,43.85900000000001ZM37.243,50.206C35.378,49.034000000000006,33.388000000000005,47.866,31.458000000000002,46.882000000000005C29.533,45.901,27.803,44.914,26.494,44.914C23.572,44.914,21.2,47.286,21.2,50.208C21.2,53.129,23.572,55.501,26.494,55.501C27.803,55.501,29.533,54.513999999999996,31.458,53.533C33.388999999999996,52.549,35.378,51.381,37.242999999999995,50.206ZM64.336,50.209C66.201,51.381,68.191,52.54900000000001,70.121,53.533C72.04599999999999,54.514,73.776,55.501000000000005,75.085,55.501000000000005C78.00699999999999,55.501000000000005,80.37899999999999,53.129000000000005,80.37899999999999,50.208000000000006C80.37899999999999,47.28600000000001,78.00699999999999,44.91400000000001,75.085,44.91400000000001C73.776,44.91400000000001,72.04599999999999,45.90100000000001,70.121,46.882000000000005C68.19,47.86600000000001,66.201,49.034000000000006,64.336,50.209Z'
    #parse_svg_path(hollow_inf, 0)